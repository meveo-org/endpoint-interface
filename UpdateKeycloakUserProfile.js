/*
 * This is a sample POST request
 */

const buildRequestParameters = (parameters, schema) => {
  if (schema) {
    const errors = []
    const requestParameters = Object.keys(
      schema.properties,
    ).reduce((reqParameters, property) => {
      const value = parameters[property]
      const isRequired = schema.properties[property].required

      if (isRequired && !value) {
        errors.push(`${property} is required.`)
      } else if (!!value) {
        return { ...reqParameters, [property]: value }
      }
      return reqParameters
    }, {})
    if (errors.length > 0) {
      throw errors
    }
    return requestParameters
  }
  return null
}

const EVENT = {
  SUCCESS: 'UpdateKeycloakUserProfile-SUCCESS',
  ERROR: 'UpdateKeycloakUserProfile-ERROR',
}

export const registerEventListeners = (
  component,
  successCallback,
  errorCallback,
) => {
  if (successCallback) {
    component.addEventListener(EVENT.SUCCESS, successCallback)
  }
  if (errorCallback) {
    component.addEventListener(EVENT.ERROR, errorCallback)
  }
}

export const getRequestSchema = async (parameters, config) => {
  return {
    name: 'UserProfileRequest',
    description: 'Schema definition for a user profile',
    properties: {
      userName: {
        type: 'STRING',
        required: true,
        description: 'The name of the user.',
      },
      firstName: {
        type: 'STRING',
        required: false,
        description: 'The user\'s first name.',
      },
      lastName: {
        type: 'STRING',
        required: false,
        description: 'The user\'s last name.',
      },
      email: {
        type: 'STRING',
        required: false,
        description: 'The email of the user.',
      },
      emailVerified: {
        type: 'BOOLEAN',
        required: true,
        description: 'Indicates if a user\'s email is already verified.',
      },
      attributes: {
        type: 'OBJECT',
        required: false,
        description: 'Additional user profile information',
        properties: {
          locale: {
            type: 'ARRAY',
            'item-type': 'STRING',
            required: true,
            description: 'Locales registered to the user.',
          },
        },
      },
    },
  }
}

export const getResponseSchema = async (parameters, config) => {
  return null
}

export const executeApiCall = async (
  component,
  params,
  successCallback, // optional
  errorCallback,
) => {
  try {
    registerEventListeners(component, successCallback, errorCallback)
    const parameters = params || {}
    const { token, config, } = parameters

    // the name of the config variable is the name of the module
    const { UpdateKeycloakUserProfile: { OVERRIDE_URL, USE_MOCK } } = config || {};

    // the baseUrl can be overridden by indicating a overrideUrl in the
    // parameters, by default it will use the same URL as the client
    // application or if this is auto-generated by meveo, it will have the
    // server's host url
    const baseUrl = OVERRIDE_URL || window.location.origin; // || server.host.url


    // just an example how to use the useMock parameter to switch between mock and actual endpoints.
    const apiUrl = USE_MOCK
      ? `${baseUrl}/auth/realms/meveo/account?useMock=true`
      : `${baseUrl}/auth/realms/meveo/account`;

    // fetch request schema to filter out optional parameters that should not be
    // passed into the request
    const requestSchema = await getRequestSchema(parameters)
    const requestParameters = buildRequestParameters(parameters, requestSchema);


    const requestUrl = new URL(apiUrl)

    const headers = new Headers()
    headers.append('Content-Type', 'application/json')
    headers.append('Accept', 'application/json')
    headers.append('Authorization', `Bearer ${token}`)
    const options = {
      method: 'POST',
      headers,
      body: JSON.stringify(requestParameters),
    }

    const response = await fetch(requestUrl, options)
    if (!response.ok) {
      throw [
        `Encountered error calling API: ${apiUrl}`,
        `Status code: ${response.status} [${response.statusText}]`,
      ]
    }
    // if accept = "application/json" otherwise return response.text()
    const result = await response.json();
    component.dispatchEvent(
      new CustomEvent(EVENT.SUCCESS, { detail: { result }, bubbles: true }),
    )
  } catch (error) {
    component.dispatchEvent(
      new CustomEvent(EVENT.ERROR, { detail: { error }, bubbles: true }),
    )
  }
}
